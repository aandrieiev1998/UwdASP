// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UwdASP.Data;

namespace UwdASP.Migrations
{
    [DbContext(typeof(UwdDbContext))]
    [Migration("20190108193908_Tenth")]
    partial class Tenth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Bookkeepings.Bookkeeping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<float>("BalanceAfterTransaction");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<long>("StudentDataId");

                    b.HasKey("Id");

                    b.HasIndex("StudentDataId");

                    b.ToTable("Bookkeepings");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Semester");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Programowanie Gr.1",
                            Semester = 7
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sieci komputerowe Gr. 2",
                            Semester = 7
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Programowanie",
                            Semester = 6
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Programowanie",
                            Semester = 5
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Programowanie",
                            Semester = 4
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Matematyka"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Fizyka"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Literatura"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Programowanie Java"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Programowanie C++"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Programowanie Python"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Infrastruktura sieci"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Bazy danych"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<long>("LessonId");

                    b.Property<string>("MarkType")
                        .IsRequired();

                    b.Property<long>("StudentDataId");

                    b.Property<long>("TeacherDataId");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentDataId");

                    b.HasIndex("TeacherDataId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Bardzo dobrze",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 9, 12, 34, 42, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 4L,
                            MarkType = "Regular",
                            StudentDataId = 1L,
                            TeacherDataId = 1L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Elegancko",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 7, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 7L,
                            MarkType = "Regular",
                            StudentDataId = 1L,
                            TeacherDataId = 2L,
                            Value = 4.5f
                        },
                        new
                        {
                            Id = 3L,
                            Comment = "Elegancko",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 3L,
                            MarkType = "Regular",
                            StudentDataId = 8L,
                            TeacherDataId = 2L,
                            Value = 4.5f
                        },
                        new
                        {
                            Id = 4L,
                            Comment = "Wystarczy",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 5L,
                            MarkType = "Regular",
                            StudentDataId = 6L,
                            TeacherDataId = 3L,
                            Value = 3.5f
                        },
                        new
                        {
                            Id = 5L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 3L,
                            MarkType = "Regular",
                            StudentDataId = 7L,
                            TeacherDataId = 3L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 6L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 5L,
                            MarkType = "Regular",
                            StudentDataId = 2L,
                            TeacherDataId = 3L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 7L,
                            Comment = "No niestety",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 8L,
                            MarkType = "Regular",
                            StudentDataId = 3L,
                            TeacherDataId = 3L,
                            Value = 3f
                        },
                        new
                        {
                            Id = 8L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 6L,
                            MarkType = "Regular",
                            StudentDataId = 6L,
                            TeacherDataId = 2L,
                            Value = 5f
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Presence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<long>("LessonId");

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Presences");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<long>("LessonId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expiration");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Programowanie i bazy danych"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sieci komputerowe"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Fizioterapia"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Zarządzanie"
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.StudentData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Balance");

                    b.Property<int>("BankAccountNumber");

                    b.Property<long>("GroupId");

                    b.Property<int>("Index");

                    b.Property<int>("Semester");

                    b.Property<long>("SpecializationId");

                    b.Property<DateTime>("StudyBeginningDate");

                    b.Property<string>("StudyType")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsData");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Balance = 1500f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29282,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Balance = 1650f,
                            BankAccountNumber = 123456789,
                            GroupId = 2L,
                            Index = 29283,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Balance = -1300f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29284,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Balance = 1337f,
                            BankAccountNumber = 123456789,
                            GroupId = 3L,
                            Index = 29285,
                            Semester = 7,
                            SpecializationId = 2L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Balance = 1337f,
                            BankAccountNumber = 123456789,
                            GroupId = 3L,
                            Index = 29285,
                            Semester = 7,
                            SpecializationId = 2L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Balance = 9999f,
                            BankAccountNumber = 123456789,
                            GroupId = 4L,
                            Index = 29286,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Balance = 2400f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29287,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Balance = 5000f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29288,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TeachersData");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 2L,
                            UserId = 10L
                        },
                        new
                        {
                            Id = 3L,
                            UserId = 11L
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<long>("TeacherDataId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherDataId");

                    b.ToTable("TeacherGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GroupId = 1L,
                            TeacherDataId = 3L
                        },
                        new
                        {
                            Id = 2L,
                            GroupId = 2L,
                            TeacherDataId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            GroupId = 3L,
                            TeacherDataId = 3L
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dd92276-d6ce-48a3-bbc2-b317868bdafa",
                            Email = "aandrieiev@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Andrieiev",
                            LastName = "Andrieiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "AANDRIEIEV@GMAIL.COM",
                            NormalizedUserName = "AANDRIEIEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEO906CT2VkfXXxXwHbRBaydV8tlbx3vpFRlmoIxQT/SoPn1BYewzRQc5bT3osytOAQ==",
                            PhoneNumber = "+48537018321",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aandrieiev",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0574dd66-f508-47a9-9376-572332c628d3",
                            Email = "dszewczenko@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Dmytro",
                            LastName = "Szewczenko",
                            LockoutEnabled = false,
                            NormalizedEmail = "DSZEWCZENKO@MAIL.RU",
                            NormalizedUserName = "DSZEWCZENKO",
                            PasswordHash = "AQAAAAEAACcQAAAAEM9F7dNioo9oE5OjN6Z4WGN2A8WIrOH4KpIEKoR52pMJuZi3h4PdgmJa5OpX9XI4Yw==",
                            PhoneNumber = "+4856433666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dszewczenko",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc3bfa53-252a-4d9f-9a3c-1c8e876d6140",
                            Email = "mmorrison@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mykhailo",
                            LastName = "Morrison",
                            LockoutEnabled = false,
                            NormalizedEmail = "MMORRISON@GMAIL.COM",
                            NormalizedUserName = "MMORRISON",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbEiBPEyX6tNC23aiFCJLRIwsp8xH825NU4iGu8UmeLzk29ctsrISuwjpcEUAGOzA==",
                            PhoneNumber = "+4856666666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mmorrison",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1df31fc-e131-4165-a991-99c041c35d32",
                            Email = "srazovyi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Serhii",
                            LastName = "Razovyi",
                            LockoutEnabled = false,
                            NormalizedEmail = "SRAZOVYI@GMAIL.COM",
                            NormalizedUserName = "SRAZOVYI",
                            PasswordHash = "AQAAAAEAACcQAAAAEL01sYRqSYt4IerYmtfzrfdftlOnoq9P5XbYqvGYQvjkryn/0dsr1DY+MdSTKii7lQ==",
                            PhoneNumber = "+486565346521",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "srazovyi",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 5L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f19ba912-c2e0-4998-893d-6a06dc079105",
                            Email = "mkowalska@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Matylda",
                            LastName = "Kowalska",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKOWALSKA@GMAIL.COM",
                            NormalizedUserName = "MKOWALSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAECdWYPSNM3fJR9MEYV0LPBUJVy7XiDAAYDj93jjU0+Ht68chD/9+SEgkyczaPJUtrw==",
                            PhoneNumber = "+48656534642",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mkowalska",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 6L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a33296a-8fac-4c07-9ae6-b549feab8596",
                            Email = "awawrzyniak@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Antonina",
                            LastName = "Wawrzyniak",
                            LockoutEnabled = false,
                            NormalizedEmail = "AWAWRZYNIAK@GMAIL.COM",
                            NormalizedUserName = "AWAWRZYNIAK",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/pEpx6TpDKaINNfwWpT2y69v3Lp50z3E1xUV9gD3KR5+XUPVBiUoQbcXUrcDOH5A==",
                            PhoneNumber = "+4865653464",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "awawrzyniak",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 7L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "197e2c73-15c5-4ec9-8bae-55636ddf2321",
                            Email = "skarpiński@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Szymon",
                            LastName = "Karpiński",
                            LockoutEnabled = false,
                            NormalizedEmail = "SKARPIŃSKI@GMAIL.COM",
                            NormalizedUserName = "SKARPIŃSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEFtYGJoKWZeUhV3BocVdgXY7srCETvdqwHataBcJsW+zALoKCCPtnLUwXPTZD+j3Xg==",
                            PhoneNumber = "+4865653465",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "skarpiński",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 8L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fd3d0fb-2667-4ce9-ba61-8e4863d06758",
                            Email = "kpawłowska@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kinga",
                            LastName = "Pawłowska",
                            LockoutEnabled = false,
                            NormalizedEmail = "KPAWŁOWSKA@GMAIL.COM",
                            NormalizedUserName = "KPAWŁOWSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBskC6QsahUncnWTxUkkxYlih7GS4toK/XXF1u6N5m7LhvcKs3AyIW+FOfPnP231MA==",
                            PhoneNumber = "+4865653466",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kpawłowska",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 9L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d87456cc-560a-44fd-b6af-e19327072284",
                            Email = "krychlicki@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kicior",
                            LastName = "Rychlicki",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRYCHLICKI@GMAIL.COM",
                            NormalizedUserName = "KRYCHLICKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEEMwAVJRnhFa410w2zdF1v5bf+NBf6kjADgY0PZM+sNdtydjkRGJIcmXXieUl19aDw==",
                            PhoneNumber = "+486546546542",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "krychlicki",
                            UserType = "Teacher"
                        },
                        new
                        {
                            Id = 10L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fe16665-5690-4bf8-ac4c-6bca99201374",
                            Email = "aniewiamodmski@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adam",
                            LastName = "Niewiamodmski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIEWIADOMSKI@GMAIL.COM",
                            NormalizedUserName = "ANIEWIADOMSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbDczBbfZzPXgW29FIdDPlgOQZ56CnIedl4k+3gNeZUyM04YzDwzzEywS9d5uxZcw==",
                            PhoneNumber = "+486542546443",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aniewiamodmski",
                            UserType = "Teacher"
                        },
                        new
                        {
                            Id = 11L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58a6aaee-afa3-4de2-9be4-b3a83bb10364",
                            Email = "mkacperski@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maciej",
                            LastName = "Kacperski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKACPERSKI@GMAIL.COM",
                            NormalizedUserName = "MKACPERSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHoDVO/Tf8Z8VDwPvBK3igTG+XoplS2IkwxyoN4FJ4/QC0qzUH8NVpBu3l8O0tuxg==",
                            PhoneNumber = "+489541543785",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mkacperski",
                            UserType = "Teacher"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Bookkeepings.Bookkeeping", b =>
                {
                    b.HasOne("UwdASP.Data.Models.StudentData", "StudentData")
                        .WithMany()
                        .HasForeignKey("StudentDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Mark", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Marks.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.StudentData", "StudentData")
                        .WithMany()
                        .HasForeignKey("StudentDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.TeacherData", "TeacherData")
                        .WithMany()
                        .HasForeignKey("TeacherDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Presence", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Marks.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.StudentData", "StudentData")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Marks.Schedule", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.Marks.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Session", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.StudentData", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherData", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherGroup", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.TeacherData", "TeacherData")
                        .WithMany()
                        .HasForeignKey("TeacherDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
