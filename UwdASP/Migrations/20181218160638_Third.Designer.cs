// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UwdASP.Data;

namespace UwdASP.Migrations
{
    [DbContext(typeof(UwdDbContext))]
    [Migration("20181218160638_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Semester");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Programowanie Gr.1",
                            Semester = 7
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sieci komputerowe Gr. 2",
                            Semester = 7
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Programowanie",
                            Semester = 6
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Programowanie",
                            Semester = 5
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Programowanie",
                            Semester = 4
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Matematyka"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Fizyka"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Literatura"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Programowanie Java"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Programowanie C++"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Programowanie Python"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Infrastruktura sieci"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Bazy danych"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<long>("LessonId");

                    b.Property<string>("MarkType")
                        .IsRequired();

                    b.Property<long>("StudentDataId");

                    b.Property<long>("TeacherDataId");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentDataId");

                    b.HasIndex("TeacherDataId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Bardzo dobrze",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 9, 12, 34, 42, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 4L,
                            MarkType = "Regular",
                            StudentDataId = 1L,
                            TeacherDataId = 1L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Elegancko",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 7, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 7L,
                            MarkType = "Regular",
                            StudentDataId = 1L,
                            TeacherDataId = 2L,
                            Value = 4.5f
                        },
                        new
                        {
                            Id = 3L,
                            Comment = "Elegancko",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 2, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 3L,
                            MarkType = "Regular",
                            StudentDataId = 8L,
                            TeacherDataId = 2L,
                            Value = 4.5f
                        },
                        new
                        {
                            Id = 4L,
                            Comment = "Wystarczy",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 5L,
                            MarkType = "Regular",
                            StudentDataId = 6L,
                            TeacherDataId = 3L,
                            Value = 3.5f
                        },
                        new
                        {
                            Id = 5L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 3L,
                            MarkType = "Regular",
                            StudentDataId = 7L,
                            TeacherDataId = 3L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 6L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 5L,
                            MarkType = "Regular",
                            StudentDataId = 2L,
                            TeacherDataId = 3L,
                            Value = 5f
                        },
                        new
                        {
                            Id = 7L,
                            Comment = "No niestety",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 8L,
                            MarkType = "Regular",
                            StudentDataId = 3L,
                            TeacherDataId = 3L,
                            Value = 3f
                        },
                        new
                        {
                            Id = 8L,
                            Comment = "Idealnie",
                            Date = new DateTimeOffset(new DateTime(2018, 11, 10, 13, 5, 9, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            LessonId = 6L,
                            MarkType = "Regular",
                            StudentDataId = 6L,
                            TeacherDataId = 2L,
                            Value = 5f
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.Presence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<long>("LessonId");

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Presences");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<long>("LessonId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LessonId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expiration");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("UwdASP.Data.Models.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Programowanie i bazy danych"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Sieci komputerowe"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Fizioterapia"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Zarządzanie"
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.StudentData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Balance");

                    b.Property<int>("BankAccountNumber");

                    b.Property<long>("GroupId");

                    b.Property<int>("Index");

                    b.Property<int>("Semester");

                    b.Property<long>("SpecializationId");

                    b.Property<DateTime>("StudyBeginningDate");

                    b.Property<string>("StudyType")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsData");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Balance = 1500f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29282,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Balance = 1650f,
                            BankAccountNumber = 123456789,
                            GroupId = 2L,
                            Index = 29283,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Balance = -1300f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29284,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Balance = 1337f,
                            BankAccountNumber = 123456789,
                            GroupId = 3L,
                            Index = 29285,
                            Semester = 7,
                            SpecializationId = 2L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Balance = 1337f,
                            BankAccountNumber = 123456789,
                            GroupId = 3L,
                            Index = 29285,
                            Semester = 7,
                            SpecializationId = 2L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Balance = 9999f,
                            BankAccountNumber = 123456789,
                            GroupId = 4L,
                            Index = 29286,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Balance = 2400f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29287,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Balance = 5000f,
                            BankAccountNumber = 123456789,
                            GroupId = 1L,
                            Index = 29288,
                            Semester = 7,
                            SpecializationId = 1L,
                            StudyBeginningDate = new DateTime(2015, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudyType = "Stationary",
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UserId = 9L
                        },
                        new
                        {
                            Id = 2L,
                            UserId = 10L
                        },
                        new
                        {
                            Id = 3L,
                            UserId = 11L
                        });
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<long?>("TeacherDataId");

                    b.Property<long>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherDataId");

                    b.ToTable("TeacherGroups");
                });

            modelBuilder.Entity("UwdASP.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7149631-6c98-420f-a7b8-c75dd8657a57",
                            Email = "aandrieiev@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Andrieiev",
                            LastName = "Andrieiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "AANDRIEIEV@GMAIL.COM",
                            NormalizedUserName = "AANDRIEIEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAfFVE7j/j3wme/uiRpTyFXiZEIWpT+hy46TEIW7c7WsS550oVrgwp5UNL9yBVo1A==",
                            PhoneNumber = "+48537018321",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aandrieiev",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb05fcc5-4640-43c2-a7f7-c446113d2394",
                            Email = "dszewczenko@mail.ru",
                            EmailConfirmed = false,
                            FirstName = "Dmytro",
                            LastName = "Szewczenko",
                            LockoutEnabled = false,
                            NormalizedEmail = "DSZEWCZENKO@MAIL.RU",
                            NormalizedUserName = "DSZEWCZENKO",
                            PasswordHash = "AQAAAAEAACcQAAAAEChlpLzBHPOyYF61325iv6P3g/CfMNpmVwBIF9XuG8gyIQObW9k4YWkBBWPhfTtR5w==",
                            PhoneNumber = "+4856433666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "dszewczenko",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "783c066a-0c7f-4c4b-8965-1a71617b0811",
                            Email = "mmorrison@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mykhailo",
                            LastName = "Morrison",
                            LockoutEnabled = false,
                            NormalizedEmail = "MMORRISON@GMAIL.COM",
                            NormalizedUserName = "MMORRISON",
                            PasswordHash = "AQAAAAEAACcQAAAAEKlqJf5oVP5DGGmN7Q1+9KQs5v3wMo1W9X+4SZ22U7g9BSBDZ0p5dnj9RLroOa8LlQ==",
                            PhoneNumber = "+4856666666",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mmorrison",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f18b3d8-80bf-4961-a332-48cfedab3164",
                            Email = "srazovyi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Serhii",
                            LastName = "Razovyi",
                            LockoutEnabled = false,
                            NormalizedEmail = "SRAZOVYI@GMAIL.COM",
                            NormalizedUserName = "SRAZOVYI",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOBdHJmduYVBh8nq0rh/Z5RJ5SSI4rgAhluZN22i09rCMnqFiSSPvGR++FThePdVQ==",
                            PhoneNumber = "+486565346521",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "srazovyi",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 5L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "954b87bd-f24b-4317-a2f3-2750a11229d0",
                            Email = "mkowalska@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Matylda",
                            LastName = "Kowalska",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKOWALSKA@GMAIL.COM",
                            NormalizedUserName = "MKOWALSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcBBQqkASkc5fsWV/4uSpVwVspSpT4J9uPlvZIs7Nn8+v+6vmrvjw7sVbeNP5AU/g==",
                            PhoneNumber = "+48656534642",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mkowalska",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 6L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7826c0ca-2920-4255-a040-c119df6e8bfd",
                            Email = "awawrzyniak@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Antonina",
                            LastName = "Wawrzyniak",
                            LockoutEnabled = false,
                            NormalizedEmail = "AWAWRZYNIAK@GMAIL.COM",
                            NormalizedUserName = "AWAWRZYNIAK",
                            PasswordHash = "AQAAAAEAACcQAAAAEL12dp83DRNoRSSCySnjTxzaf7DWkhixk4pavuueuh2ldH2ME6nntJdPssebKN5uDA==",
                            PhoneNumber = "+4865653464",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "awawrzyniak",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 7L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23b0c9cb-4aef-4abd-8702-6182cbc4632e",
                            Email = "skarpiński@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Szymon",
                            LastName = "Karpiński",
                            LockoutEnabled = false,
                            NormalizedEmail = "SKARPIŃSKI@GMAIL.COM",
                            NormalizedUserName = "SKARPIŃSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEEJIGnW711vSEU6JsRSENnxARBpBRfd27v/DrMKo+8LfpgdLY1Q2wrrE9nhNaUCPFQ==",
                            PhoneNumber = "+4865653465",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "skarpiński",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 8L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04066f21-8d64-4fb0-9837-50eba596e807",
                            Email = "kpawłowska@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kinga",
                            LastName = "Pawłowska",
                            LockoutEnabled = false,
                            NormalizedEmail = "KPAWŁOWSKA@GMAIL.COM",
                            NormalizedUserName = "KPAWŁOWSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAENC/bGAyAizOPwJ9nfxOEFXE8/TCGTON/6a73iwd13SW6xxSM+h0+F13jbfJYn/mLQ==",
                            PhoneNumber = "+4865653466",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kpawłowska",
                            UserType = "Student"
                        },
                        new
                        {
                            Id = 9L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c32c664b-1f73-4751-8751-d6483f000460",
                            Email = "krychlicki@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kicior",
                            LastName = "Rychlicki",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRYCHLICKI@GMAIL.COM",
                            NormalizedUserName = "KRYCHLICKI",
                            PasswordHash = "AQAAAAEAACcQAAAAEGS+j/lftHnvo5AkgL7kc+vg2LSftea6jldV/mbq0SWLgjJnyPI3Qbq7PCHGAhEHdQ==",
                            PhoneNumber = "+486546546542",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "krychlicki",
                            UserType = "Teacher"
                        },
                        new
                        {
                            Id = 10L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dcd843b-67a6-4b9b-b141-aa12f1091da1",
                            Email = "aniewiamodmski@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adam",
                            LastName = "Niewiamodmski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANIEWIADOMSKI@GMAIL.COM",
                            NormalizedUserName = "ANIEWIADOMSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAENBWcTq2zgCia6EXzogzoUv4FZzKAKPlB69iVptFqUl02UhK/6YyQpl3VjO26MD5Ow==",
                            PhoneNumber = "+486542546443",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "aniewiamodmski",
                            UserType = "Teacher"
                        },
                        new
                        {
                            Id = 11L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5df8590-87e7-4727-b478-00f6a3092106",
                            Email = "mkacperski@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maciej",
                            LastName = "Kacperski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MKACPERSKI@GMAIL.COM",
                            NormalizedUserName = "MKACPERSKI",
                            PasswordHash = "AQAAAAEAACcQAAAAENBoJITJCEicMYs8DbVCTpfNco8n/4kFRyIa8qpuGemkLYq1pTvvl7AxT7fgw9KkWw==",
                            PhoneNumber = "+489541543785",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "mkacperski",
                            UserType = "Teacher"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Mark", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.StudentData", "StudentData")
                        .WithMany()
                        .HasForeignKey("StudentDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.TeacherData", "TeacherData")
                        .WithMany()
                        .HasForeignKey("TeacherDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Presence", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.StudentData", "StudentData")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Schedule", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.Session", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.StudentData", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherData", b =>
                {
                    b.HasOne("UwdASP.Data.Models.User", "Identity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UwdASP.Data.Models.TeacherGroup", b =>
                {
                    b.HasOne("UwdASP.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UwdASP.Data.Models.TeacherData", "TeacherData")
                        .WithMany()
                        .HasForeignKey("TeacherDataId");
                });
#pragma warning restore 612, 618
        }
    }
}
